#ifndef IO_H
#include <locust/rt.io.h>
#endif

#ifndef ATOMIC_H
#include <locust/sched.atomic.h>
#endif

#include <stdio.h>

// TODO: FINISH IMPLEMENTING

// file manipulations
error file_open(file *f, string filename, byte mode) {
    if (f == NULL) { return e_not_file; }
    
    return e_none;
}

error file_close(file *f) {
    if (f == NULL) { return e_not_file; }
    
    return e_none;
}

error file_flush(file *f) {
	if (f == NULL) { return e_not_file; }
	if (!file_is_writeable(f)) { return e_not_writeable; }

    _flush_locked(f);
	return e_none;
}

// reading functions
error file_getc(file *f, byte* c) {
    if (f == NULL) { return e_not_file; }
    if (!file_is_readable(f)) { return e_not_readable; }
    
    return e_none;
}

/*
error file_gets(file *f, uint, string* s) {
    if (f == NULL) { return e_not_file; }
    if (!file_is_readable(f)) { return e_not_readable; }
    
    return e_none;    
}
*/

// writing functions
error file_putc(file *f, byte c) {
    if (f == NULL) { return e_not_file; }
    if (!file_is_writeable(f)) { return e_not_writeable; }
    
    uint64 i = atomic_fetch_and_add(&f->buff_i, 1);
    if (i < f->buff.len) {
        vector_set(&f->buff, i, c);
    } else {
        _wbuf(f, c);
    }
    return e_none;
}

error file_puts(file *f, string s) {
    if (f == NULL) { return e_not_file; }
    
    return e_none;
}

// status queries
bool file_is_eof(file *f) {
    
}

